#!/usr/bin/env php
<?php

// --
// This script cannot be hacklang due to you might be wanting to restart hhvm 
// because of hack related strict failures, etc.
// --
date_default_timezone_set('GMT');

function message($prompt) {
  echo date('r') . ' - ' . $prompt . "\n";
  return true;
}

function run_command($command) {
  $return_value = null;

  // message("command=$command");
  system($command, $return_value);
  // message("command_rv=$return_value");

  if ( $return_value == 0 ) {
    return true;
  }

  return false;
}

function hhvm_stop() {
  return run_command('hh_client stop 2> /dev/null ');
}

function hhvm_stop_pkill() {
  $user = $_ENV['USER'];
  return run_command('pkill -u ' . $user . ' hh_server');
}

function hhvm_start() {
  return run_command('hh_client start 2> /dev/null ');
}

function hhvm_restart() {
  return run_command('hh_client restart 2> /dev/null ');
}

function hhvm_cleanup() {

  $HOME = getenv('HOME');
  $USER = getenv('USER');

  $removed_hhbc = false;
  $removed_tmp_hh = false;

  $hhbc_file = $HOME . '/.hhvm.hhbc';
  $tmp_hh_dir = '/tmp/hh_server';

  if ( is_file($hhbc_file) ) {
    $removed_hhbc = run_command('rm ' . $hhbc_file . ' 2> /dev/null');
  }

  if ( is_dir($tmp_hh_dir) ) {
    run_command('find ' . $tmp_hh_dir . ' -user ' . $USER . ' -type f -exec rm {} \; 2> /dev/null ');
    run_command('find ' . $tmp_hh_dir . ' -user ' . $USER . ' -type d -exec rm -r {} \; 2> /dev/null ');
    run_command('find ' . $tmp_hh_dir . ' -user ' . $USER . ' -type l -exec unlink {} \; 2> /dev/null ');
  }

  return true;

}

function hhvm_restarted() {
  message("HHVM - up and running!");
  exit(0);
}

function hhvm_restart_failure($message) {
  message("HHVM - $message - failed, sleeping 1");
  sleep(1);
}

function os_isMac() {
  $outputBuffer = array();
  exec('uname -s', $outputBuffer);
  if ( isset($outputBuffer[0]) && preg_match('/Darwin/', $outputBuffer[0]) ) {
    return true;
  }
  return false;
}

$isMac = os_isMac();

for ( $i = 0; $i < 5; $i++ ) {

  // --
  // on the mac platform hhvm_stop will not stop a running hhvm server.
  // --
  if ( $isMac === false && hhvm_stop() === true ) {
    message("HHVM - stopped");
  } else {
    if ( hhvm_stop_pkill() === true ) {
      message("HHVM - stopped via pkill");
    } else {
      hhvm_restart_failure("hhvm_stop");
      continue;
    }
  }
  
  if ( hhvm_cleanup() === true ) {
    message("HHVM - cleanup completed");
  } else {
    hhvm_restart_failure("hhvm_cleanup");
    continue;
  }

  if ( hhvm_start() === true ) {
    message("HHVM - started");
    hhvm_restarted();
  }

  if ( hhvm_restart() === true ) {
    message("HHVM - started, via hh_client restart");
    hhvm_restarted();
  } else {
    hhvm_restart_failure("hhvm_start and hhvm_restart");
    continue;
  }

}

message("HHVM - failed to restart");
exit(255);
